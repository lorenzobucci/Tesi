syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option java_package = "io.github.lorenzobucci.tesi.metamodel.services_management.service.gRPC";

package services_management;

service crud {
  rpc AddEndpointServiceType(EndpointServiceTypeConstructorParameters) returns (EndpointServiceTypeDTO);
  rpc GetEndpointServiceType(EndpointServiceTypeDTO) returns (EndpointServiceTypeDTO);
  rpc GetEndpointServiceTypeByURI(google.protobuf.StringValue) returns (EndpointServiceTypeDTO);
  rpc RetrieveEndpointServiceTypes(google.protobuf.Empty) returns (EndpointServiceTypeList);
  rpc RemoveEndpointServiceType(EndpointServiceTypeDTO) returns (google.protobuf.Empty);

  rpc GetEndpointServiceInstance(EndpointServiceInstanceDTO) returns (EndpointServiceInstanceDTO);
  rpc RetrieveEndpointServiceInstances(google.protobuf.Empty) returns (EndpointServiceInstanceList);

  rpc GetServiceInstance(ServiceInstanceDTO) returns (ServiceInstanceDTO);
  rpc RetrieveServiceInstances(google.protobuf.Empty) returns (ServiceInstanceList);

  rpc AddServiceType(ServiceTypeConstructorParameters) returns (ServiceTypeDTO);
  rpc GetServiceType(ServiceTypeDTO) returns (ServiceTypeDTO);
  rpc RetrieveServiceTypes(google.protobuf.Empty) returns (ServiceTypeList);
  rpc RemoveServiceType(ServiceTypeDTO) returns (google.protobuf.Empty);

  rpc GetWorkflowInstance(WorkflowInstanceDTO) returns (WorkflowInstanceDTO);
  rpc RetrieveWorkflowInstances(google.protobuf.Empty) returns (WorkflowInstanceList);

  rpc AddWorkflowType(WorkflowTypeConstructorParameters) returns (WorkflowTypeDTO);
  rpc GetWorkflowType(WorkflowTypeDTO) returns (WorkflowTypeDTO);
  rpc GetWorkflowTypeByURI(google.protobuf.StringValue) returns (WorkflowTypeDTO);
  rpc RetrieveWorkflowTypes(google.protobuf.Empty) returns (WorkflowTypeList);
  rpc RemoveWorkflowType(RemoveWorkflowTypeParameters) returns (google.protobuf.Empty);
}

service operational {
  rpc InstantiateWorkflowInstance(InstantiateWorkflowParameters) returns (WorkflowInstanceDTO);
  rpc TerminateWorkflowInstance(WorkflowInstanceDTO) returns (google.protobuf.Empty);
  rpc UpdateWorkflowRequirements(UpdateRequirementsParameters) returns (google.protobuf.Empty);

  rpc AddServiceTypeToWorkflowType(AddServiceTypeToWorkflowTypeParameters) returns (google.protobuf.Empty);
  rpc AddRPCToWorkflowType(AddRPCToWorkflowTypeParameters) returns (google.protobuf.Empty);
  rpc WorkflowTypeContainsServiceType(WorkflowTypeContainsServiceTypeParameters) returns (google.protobuf.BoolValue);
  rpc RemoveServiceTypeFromWorkflow(RemoveServiceTypeFromWorkflowParameters) returns (google.protobuf.Empty);
  rpc UpdateWorkflowEndpointServiceType(UpdateWorkflowEndpointServiceTypeParameters) returns (google.protobuf.Empty);
  rpc RetrieveServiceTypesFromWorkflow(WorkflowTypeDTO) returns (ServiceTypeList);
}

// DTO

message EndpointServiceTypeDTO {
  int64 id = 1;
  string name = 2;
  ServiceRequirementsDTO serviceRequirements = 3;
  string physicalEndpointURI = 4;
}

message EndpointServiceInstanceDTO {
  int64 id = 1;
  WorkflowInstanceDTO belongingWorkflow = 2;
  EndpointServiceTypeDTO endpointServiceType = 3;
  string parameters = 4;
}

message ServiceTypeDTO {
  int64 id = 1;
  string name = 2;
  ServiceRequirementsDTO serviceRequirements = 3;
}

message ServiceInstanceDTO {
  int64 id = 1;
  ServiceTypeDTO serviceType = 2;
  WorkflowInstanceDTO belongingWorkflow = 3;
  ContainerDTO container = 4;
}

message WorkflowTypeDTO {
  int64 id = 1;
  repeated ServiceTypeDTO serviceTypeSet = 2;
  EndpointServiceTypeDTO endpointServiceType = 3;
}

message WorkflowInstanceDTO {
  int64 id = 1;
  repeated ServiceInstanceDTO serviceInstanceSet = 2;
  EndpointServiceInstanceDTO endpointServiceInstance = 3;
  WorkflowTypeDTO refWorkflowType = 4;
  WorkflowRequirementsDTO workflowRequirements = 5;
}

message ContainerDTO {
  string ipAddress = 1;
  int64 associatedContainerId = 2;
}

// DTO LISTS

message EndpointServiceTypeList {
  repeated EndpointServiceTypeDTO endpointServiceTypes = 1;
}

message EndpointServiceInstanceList {
  repeated EndpointServiceInstanceDTO endpointServiceInstances = 1;
}

message ServiceTypeList {
  repeated ServiceTypeDTO serviceTypes = 1;
}

message ServiceInstanceList {
  repeated ServiceInstanceDTO serviceInstances = 1;
}

message WorkflowTypeList {
  repeated WorkflowTypeDTO workflowTypes = 1;
}

message WorkflowInstanceList {
  repeated WorkflowInstanceDTO workflowInstances = 1;
}

// REQUIREMENTS

message WorkflowRequirementsDTO {

}

message ServiceRequirementsDTO {

}

// METHODS PARAMETERS

message EndpointServiceTypeConstructorParameters {
  string serviceName = 1;
  ServiceRequirementsDTO serviceRequirements = 2;
  string physicalEndpointURI = 3;
}

message ServiceTypeConstructorParameters {
  string serviceName = 1;
  ServiceRequirementsDTO serviceRequirements = 2;
}

message WorkflowTypeConstructorParameters {
  EndpointServiceTypeDTO endpointServiceType = 1;
}

message RemoveWorkflowTypeParameters {
  WorkflowTypeDTO workflowType = 1;
  bool removeEndpointServiceType = 2;
}

message InstantiateWorkflowParameters {
  string endpointURI = 1;
  string endpointParameters = 2;
  WorkflowRequirementsDTO workflowRequirements = 3;
}

message UpdateRequirementsParameters {
  WorkflowInstanceDTO workflowInstance = 1;
  WorkflowRequirementsDTO newWorkflowRequirements = 2;
}

message AddServiceTypeToWorkflowTypeParameters {
  WorkflowTypeDTO workflowType = 1;
  ServiceTypeDTO serviceTypeToAdd = 2;
  ServiceTypeDTO callerServiceType = 3;
}

message AddRPCToWorkflowTypeParameters {
  WorkflowTypeDTO workflowType = 1;
  ServiceTypeDTO callerServiceType = 2;
  ServiceTypeDTO calleeServiceType = 3;
}

message WorkflowTypeContainsServiceTypeParameters {
  WorkflowTypeDTO workflowType = 1;
  ServiceTypeDTO serviceTypeToVerify = 2;
}

message RemoveServiceTypeFromWorkflowParameters {
  WorkflowTypeDTO workflowType = 1;
  ServiceTypeDTO serviceTypeToRemove = 2;
}

message UpdateWorkflowEndpointServiceTypeParameters {
  WorkflowTypeDTO workflowType = 1;
  EndpointServiceTypeDTO newEndpointServiceType = 2;
}
